package log

/**************************************************************************************************/
/*!
 *  log.go
 *
 *  loggerのwrapperモジュール
 *
 */
/**************************************************************************************************/
import (
	"sample/common/err"

	"github.com/cihub/seelog"
)

/**
 * loggers
 */
var logger seelog.LoggerInterface

/**************************************************************************************************/
/*!
 *  loggerの生成
 *
 *  \return  エラー
 */
/**************************************************************************************************/
func CreateLogger() err.ErrWriter {
	var e error
	ew := err.NewErrWriter()
	// PJ直下で実装した場合
	logger, e = seelog.LoggerFromConfigAsFile("./conf/seelog/development.xml")

	if e != nil {
		return ew.Write("fail to load logger setting")
	}
	// 一旦、デフォルトにしない
	// seelog.ReplaceLogger(logger)

	return ew
}

/**************************************************************************************************/
/*!
 *  書き込み
 */
/**************************************************************************************************/
func Flush() {
	logger.Flush()
}

/**************************************************************************************************/
/*!
 *  LOG : DEBUG
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Debug(v ...interface{}) {
	msgs := joinSpace(v)
	logger.Debug(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : INFO
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Info(v ...interface{}) {
	msgs := joinSpace(v)
	logger.Info(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : WARN
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Warn(v ...interface{}) {
	msgs := joinSpace(v)
	logger.Warn(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : ERROR
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Error(v ...interface{}) {
	msgs := joinSpace(v)
	logger.Error(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : CRITICAL
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Critical(v ...interface{}) {
	msgs := joinSpace(v)
	logger.Critical(msgs...)
}

/**************************************************************************************************/
/*!
 *  表示前に見やすいようにスペースを入れる
 *
 *  \param   v : メッセージ
 *  \return  空白挿入後メッセージ
 */
/**************************************************************************************************/
func joinSpace(v []interface{}) []interface{} {
	// 空白を間に詰める
	var newMsgArray []interface{}

	// 最後は空白入れない
	lastIndex := len(v) - 1
	for _, v := range v {
		newMsgArray = append(newMsgArray, v)
		if v != lastIndex {
			newMsgArray = append(newMsgArray, " ")
		}
	}
	return newMsgArray
}
