package log

/**************************************************************************************************/
/*!
 *  log.go
 *
 *  loggerのwrapperモジュール
 *
 */
/**************************************************************************************************/
import "github.com/cihub/seelog"

/**************************************************************************************************/
/*!
 *  LOG : DEBUG
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Debug(v ...interface{}) {
	msgs := joinSpace(v)
	seelog.Debug(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : INFO
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Info(v ...interface{}) {
	msgs := joinSpace(v)
	seelog.Info(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : WARN
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Warn(v ...interface{}) {
	msgs := joinSpace(v)
	seelog.Warn(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : ERROR
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Error(v ...interface{}) {
	msgs := joinSpace(v)
	seelog.Error(msgs...)
}

/**************************************************************************************************/
/*!
 *  LOG : CRITICAL
 *
 *  \param   v : メッセージ
 *  \return  なし
 */
/**************************************************************************************************/
func Critical(v ...interface{}) {
	msgs := joinSpace(v)
	seelog.Critical(msgs...)
}

/**************************************************************************************************/
/*!
 *  表示前に見やすいようにスペースを入れる
 *
 *  \param   v : メッセージ
 *  \return  空白挿入後メッセージ
 */
/**************************************************************************************************/
func joinSpace(v []interface{}) []interface{} {
	// 空白を間に詰める
	var newMsgArray []interface{}

	// 最後は空白入れない
	lastIndex := len(v) - 1
	for _, v := range v {
		newMsgArray = append(newMsgArray, v)
		if v != lastIndex {
			newMsgArray = append(newMsgArray, " ")
		}
	}
	return newMsgArray
}
